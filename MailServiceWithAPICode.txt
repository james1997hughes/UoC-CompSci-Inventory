using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Mail;
using System.Threading.Tasks;
using Newtonsoft.Json;

namespace InvApi
{
    public class Service
    {

        public void ScanDatabase()
        {

            string URL = "10.74.1.60:5000/api/item";

            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(URL);
            request.Method = "GET";
            HttpWebResponse webResponse = (HttpWebResponse)request.GetResponse();
            Console.WriteLine(webResponse.StatusCode);
            Console.WriteLine(webResponse.Server);
            string jsonString;
            using (Stream stream = webResponse.GetResponseStream())
            {
                StreamReader reader = new StreamReader(stream, System.Text.Encoding.UTF8);
                jsonString = reader.ReadToEnd();
            }
            List<Item> items = JsonConvert.DeserializeObject<List<Item>>(jsonString);

            Console.WriteLine(items.Count);


            for (int i = 0; i > items.Count; i++)
            {
                //get  individualsignoutdate 
                DateTime signOutDate = items[i].signOutDate;
                //get studentNo from database
                int studentNo = items[i].studentNo;
                //get deviceType from database
                string deviceType = items[i].deviceType;
                DateTime currentDate = DateTime.Today;
                
                if (currentDate >= signOutDate.AddDays(12))
                {
                    SendEmail(studentNo, deviceType, signOutDate);
                }
            }
        }

        public void SendEmail(int StudentNo, String Device, DateTime SignOutDate)
        {
            string studentEmail = $"{StudentNo}@chester.ac.uk";


            string host = "smtp.office365.com";
            int port = 587;

            using (SmtpClient client = new SmtpClient(host, port))
            {
                client.Credentials = new System.Net.NetworkCredential("5019TEST@csmb365.onmicrosoft.com", "gs4atbRc");
                client.EnableSsl = true;
                var mm = new MailMessage
                {
                    Subject = "Loan Item Return",
                    Body = $"Hello {StudentNo}, Your item, ${Device}, that you loaned out on ${SignOutDate} is due to expire. Please either return your item or contact Paul Underhill for an extention. Many Thanks, TimeSponge Software ",
                    From = new MailAddress("5019TEST@csmb365.onmicrosoft.com"),
                };
                mm.To.Add(studentEmail);
                client.Send(mm);
            }
        }
    }
}



using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace InvApi
{
    public class Item
    {
        public string id { get; set; }
        public string deviceType { get; set; }
        public string serialNumber { get; set; }
        public int mid { get; set; }
        public bool loaned { get; set; }
        public string category { get; set; }
        public DateTime signOutDate { get; set; }
        public int studentNo { get; set; }
        public string comments { get; set; }
    }
}



using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;
using Microsoft.EntityFrameworkCore;
using InvAPI.Models;
using Hangfire;
using Hangfire.SqlServer;
using InvApi;

namespace InvAPI
{
    //https://docs.hangfire.io/en/latest/background-methods/performing-recurrent-tasks.html
    public class Startup
    {
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }

        public IConfiguration Configuration { get; }

        public void ConfigureServices(IServiceCollection services)
        {
            //var connection = @"Data Source=SQL-INVENT\SQLEXPRESS;Initial Catalog=db_Inventory;Trusted_Connection=Yes;User Id=BigJames;Password=ApiPass1!";
            services.AddDbContext<ItemContext>(opt =>
                opt.UseSqlServer(Configuration.GetConnectionString("connection")));

            services.AddHangfire(configuration => configuration
                .SetDataCompatibilityLevel(CompatibilityLevel.Version_170)
                .UseSimpleAssemblyNameTypeSerializer()
                .UseRecommendedSerializerSettings()
                .UseSqlServerStorage(Configuration.GetConnectionString("connection"), new SqlServerStorageOptions
                {
                    CommandBatchMaxTimeout = TimeSpan.FromMinutes(5),
                    SlidingInvisibilityTimeout = TimeSpan.FromMinutes(5),
                    QueuePollInterval = TimeSpan.Zero,
                    UseRecommendedIsolationLevel = true,
                    UsePageLocksOnDequeue = true,
                    DisableGlobalLocks = true
                }));

            services.AddHangfireServer();
            services.AddMvc();
        }
        public void Configure(IApplicationBuilder app, IHostingEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }

            app.UseHangfireDashboard();
            RecurringJob.AddOrUpdate(() => new Service().ScanDatabase(), "0 7 */2 * *");

            app.UseMvc();
        }
    }
}